#Использовать cli
#Использовать "../core"
#Использовать "."

Перем Лог;

///////////////////////////////////////////////////////////////////////////////

Процедура ВыполнитьПриложение()

	Приложение = Новый КонсольноеПриложение(ПараметрыПриложения.ИмяПриложения(),
											"Приложение для обновления файла логов изменения по истории коммитов");
	Приложение.Версия("version", ПараметрыПриложения.Версия());

	Приложение.Опция("v verbose", Ложь, "вывод отладочной информация в процессе выполнении")
					.Флаговый()
					.ВОкружении("CHANGELOG_GENERATOR_VERSOBE");

   	Приложение.Опция("breakline", 		"",				"После какой надписи выводить новые записи");
	Приложение.Опция("release",			"",				"Номер релиза");
	Приложение.Опция("settings",		Неопределено,	"Путь к YML файлу настроек структуры лога.");
	Приложение.Опция("filename",		"CHANGELOG.MD",	"Файл для вывода лога изменений");

	Приложение.Аргумент("FROM",			"",		"SHA или TAG откуда начинать парсить логи");
	Приложение.Аргумент("TO",			"",		"SHA или TAG откуда начинать парсить логи")
						.Обязательный(Ложь);		   

	Приложение.УстановитьОсновноеДействие(ЭтотОбъект);
	Приложение.Запустить(АргументыКоманднойСтроки);

КонецПроцедуры // ВыполнениеКоманды()

Процедура ВывестиВФайл(ИмяФайл, ТекстЛога)

	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайл);
	ЗаписьТекста.Записать(ТекстЛога);
	ЗаписьТекста.Закрыть();

КонецПроцедуры

Процедура ВыполнитьКоманду(Знач КомандаПриложения) Экспорт

	ХешМеткаОт    				= КомандаПриложения.ЗначениеАргумента("FROM");
	ХешМеткаДо					= КомандаПриложения.ЗначениеАргумента("TO");
	
	НадписьПрерывания			= КомандаПриложения.ЗначениеОпции("break");
	НомерРелиза 				= КомандаПриложения.ЗначениеОпции("release");
	ФайлНастроек				= КомандаПриложения.ЗначениеОпции("settings");

	ФайлДляВывода				= КомандаПриложения.ЗначениеОпции("filename");


	ЛогИзменений 				= ПарсерГит.ПолучитьМассивКоммитов(ХешМеткаОт, ХешМеткаДо);
	
	СтруктураВывода				= Новый СтруктураЛога;
	СтруктураВывода.ИспользоватьНастройки(ФайлНастроек);

	ТекстЛога					= ГенераторЛога.СформироватьТекстовоеПредставлениеИсторииКоммитов(ЛогИзменений, 
																		СтруктураВывода.ПолучитьСтруктуруЛога());

	ВывестиВФайл(ФайлДляВывода, ТекстЛога);

	Сообщить("Готово");

КонецПроцедуры // ВыполнитьКоманду

///////////////////////////////////////////////////////
Лог = ПараметрыПриложения.Лог();

Попытка

	ВыполнитьПриложение();

Исключение

	Лог.КритичнаяОшибка(ОписаниеОшибки());

	ЗавершитьРаботу(1);

КонецПопытки;